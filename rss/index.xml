<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[100 things to do with Red Hat Management Products]]></title><description><![CDATA[A series of blogs and videos about the cool things you can do with Red Hat (Systems) Management products ]]></description><link>http://100things.wzzrd.com</link><image><url>blog_cover.png</url><title>100 things to do with Red Hat Management Products</title><link>http://100things.wzzrd.com</link></image><generator>RSS for Node</generator><lastBuildDate>Thu, 30 Mar 2017 15:11:23 GMT</lastBuildDate><atom:link href="http://100things.wzzrd.com/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Connecting Satellite 6 and Ansible Tower]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Today I want to talk about connecting Satellite 6 and Ansible Tower. There are two main benefits you can get right now from connecting Satellite 6 and Ansible Tower if you use both.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_sharing_inventory_data">Sharing inventory data</h2>
<div class="sectionbody">
<div class="paragraph">
<p>First of all, if you share inventory data, you share hostnames and IP addresses of systems between Satellite 6 and Ansible Tower. This is valuable by itself, because who wants to keep track of systems in two different places, right? But apart from hostnames and IP addresses, Satellite 6 will offer all other information it has on those systems to Tower as well. This means you get access to what lifecycle environment a system is in, what content view it uses, and many more things.</p>
</div>
<div class="paragraph">
<p>Some of that information is available as variables at the system level, like the amount of outstanding errata and the name of the operating system.</p>
</div>
<div class="paragraph">
<p>Other things are used directly in Tower to group systems by. As an example, your hostgroups in Satellite will directly transfor into groups of systems in Tower as well, and this goes for lifecycle environments, content views and Puppet environments as well. That already should make your life a lot easier :)</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/wzzrd/hubpress.io/gh-pages/images/imported_system.png" alt="Imported system" width="740" height="265">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_provisioning_callbacks">Provisioning callbacks</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The second things you can more easily achieve by connecting Ansible Tower to Satellite 6, is the use of <strong>provisioning callbacks</strong>.</p>
</div>
<div class="paragraph">
<p>A provisioning callback is a special URL on the Tower server, that can be called by a client node to invoke a playbook run on itself. In order to successfully trigger a playbook run, a client node has to POST a special variable to the URL.</p>
</div>
<div class="paragraph">
<p>Tower will then refresh the inventory (you need to enable that on the inventory manually, by the way) and execute the Job Template associated with the provisioning callback.</p>
</div>
<div class="sect2">
<h3 id="_some_code_to_help_you_get_started">Some code to help you get started</h3>
<div class="paragraph">
<p>So what you need to do to make this work, is go to your Satellite and edit the provisioning template called "Satellite Kickstart Default". To this template, you add a little snippet near the end (preferably after the Puppet snippet, and before the 'Informing Satellite that we are built' part), that reads as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-erb" data-lang="erb"># This is RHEL7 specific code, as it uses systemctl, replace with
# chkconfig or an @boot cron if you run RHEL5 or RHEL6

&lt;% if @host.params['ansible_enabled'] == 'true' %&gt;
cat &gt; /etc/systemd/system/ansible-callback.service &lt;&lt; EOF
&lt;%= snippet 'ansible_callback_service' %&gt;
EOF

# Runs during first boot, removes itself
/usr/bin/systemctl enable ansible-callback
&lt;% end -%&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Then you create a new provisioning template, call it 'ansible_callback_service', and make it a snippet. Add the following code to it. Update the hostname below to match your environment.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-ini" data-lang="ini">[Unit]
Description=Provisioning callback to Ansible
Wants=network-online.target
After=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/bin/curl -k -s --data "host_config_key=&lt;%= @host.params['ansible_host_config_key'] -%&gt;" https://tower310.deployment6.lan/api/v1/job_templates/&lt;%= @host.params['ansible_job_template_id'] -%&gt;/callback/
ExecStartPost=/usr/bin/systemctl disable ansible-callback

[Install]
WantedBy=multi-user.target</code></pre>
</div>
</div>
<div class="paragraph">
<p>(I prefer to use a snippet for this for some more flexibility.)</p>
</div>
<div class="paragraph">
<p>If you&#8217;ve done the above, you can assign the following variables to hosts or hostgroups:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>ansible_enabled</code>: must be 'true' to enable provisioning callbacks to begin with</p>
</li>
<li>
<p><code>ansible_job_template_id</code>: the ID of the job template associated with the provisioning callback URL</p>
</li>
<li>
<p><code>ansible_host_config_key</code>: the variables that needs to be POSTed to the provisioning callback URL</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Make sure the inventory associated with this job template you are configuring provisioning callbacks for has 'Update on Launch' enabled.</p>
</div>
</div>
<div class="sect2">
<h3 id="_systemd_service_or_boot_cronjob_or_init_script">systemd service, or @boot cronjob, or init script</h3>
<div class="paragraph">
<p>What the above will do is deploy a small systemd service on your new system. During first boot, this service will make systemd run a single cURL command and then disable the service again, so it&#8217;ll only run once at the very first boot.</p>
</div>
<div class="paragraph">
<p>You can also adapt this service to be a @boot cronjob, or traditional initscript as well, of course.</p>
</div>
<div class="paragraph">
<p>Happy configuring!</p>
</div>
</div>
</div>
</div>]]></description><link>http://100things.wzzrd.com/2017/03/30/Connecting-Satellite-6-and-Ansible-Tower.html</link><guid isPermaLink="true">http://100things.wzzrd.com/2017/03/30/Connecting-Satellite-6-and-Ansible-Tower.html</guid><category><![CDATA[ansible]]></category><category><![CDATA[ ansible tower]]></category><category><![CDATA[ satellite6]]></category><category><![CDATA[ youtube]]></category><dc:creator><![CDATA[Maxim Burgerhout]]></dc:creator><pubDate>Thu, 30 Mar 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Building a highly available Ansible Tower cluster]]></title><description><![CDATA[<div class="paragraph">
<p>With the release of Ansible Tower 3.1 a short while back, it became possible to setup Ansible Tower in a highly available, active-active topology. You do this by setting up multiple Tower nodes that talk to a shared PostgreSQL database on a separate node. This database can be setup and managed by the Tower installation playbook, or you can manage it yourself.</p>
</div>
<div class="paragraph">
<p>Each of the Tower nodes will serve up the web front end, so your users can choose which Tower server they use to log into. If you change the configuration through the web UI on one node, the change is visible over all instances through the shared database. For example, uploading a Tower license file to one of the Tower instances will make it show up in all of your Tower cluster nodes.</p>
</div>
<div class="paragraph">
<p>Cluster nodes keep in touch with one another for job scheduling and such through RabbitMQ.</p>
</div>
<div class="paragraph">
<p>Sounds good? That&#8217;s because it is! And it gets better: setting up a Tower cluster is insanely easy!</p>
</div>
<div class="paragraph">
<p>As an example, I have set up a Tower cluster on three nodes: tower01.nontoonyt.lan, tower02.nontoonyt.lan and tower03.nontoonyt.lan. The database will reside on towerdb.nontoonyt.lan. By configuring the inventory in a specific - and quite simple - way, the Tower installation playbooks will build the whole cluster for me.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/wzzrd/hubpress.io/gh-pages/images/ansible-tower-cluster.png" alt="Tower Cluster Topology" width="460" height="650">
</div>
</div>
<div class="paragraph">
<p>The below snippet is an edited version of the special inventory file we ship in the ansible-tower-setup tarball, called "inventory_cluster".</p>
</div>
<div class="literalblock">
<div class="content">
<pre>[tower]
tower01.nontoonyt.lan
tower02.nontoonyt.lan
tower03.nontoonyt.lan

[database]
towerdb.nontoonyt.lan

[all:vars]
admin_password='myPassw0rd'

pg_host='towerdb.nontoonyt.lan'
pg_port='5432'

pg_database='tower'
pg_username='tower'
pg_password='myPassw0rd'

rabbitmq_port=5672
rabbitmq_vhost=tower
rabbitmq_username=tower
rabbitmq_password='myPassw0rd'
rabbitmq_cookie=omnomnomnom

# Needs to be true for fqdns and ip addresses
rabbitmq_use_long_name=true</pre>
</div>
</div>
<div class="paragraph">
<p>To invoke setup.sh to perform a cluster installation based on that inventory file, you just run:</p>
</div>
<div class="literalblock">
<div class="content">
<pre># ./setup.sh -i inventory_cluster</pre>
</div>
</div>
<div class="paragraph">
<p>That&#8217;s it. Hope you enjoy the new Ansible Tower cluster feature! Take a look at the Youtube screencast that goes with this blog.</p>
</div>
<div class="videoblock">
<div class="content">
<iframe src="https://www.youtube.com/embed/t3VdUjjuv70?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>]]></description><link>http://100things.wzzrd.com/2017/03/13/Building-a-highly-available-Ansible-Tower-cluster.html</link><guid isPermaLink="true">http://100things.wzzrd.com/2017/03/13/Building-a-highly-available-Ansible-Tower-cluster.html</guid><category><![CDATA[ansible]]></category><category><![CDATA[ ansible tower]]></category><category><![CDATA[ ansible tower cluster]]></category><category><![CDATA[ youtube]]></category><dc:creator><![CDATA[Maxim Burgerhout]]></dc:creator><pubDate>Mon, 13 Mar 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Using a dedicated Puppet content view]]></title><description><![CDATA[<div class="paragraph">
<p>After I <a href="https://www.youtube.com/watch?v=04m6SlvzvKY&amp;list=PLTJ5vj7osiGMHEi9SQvoyXD2vNL_v8WFv">presented at Summit</a> last Summer, I starting getting frequent questions around how to setup a dedicated Puppet content view in Satellite 6.</p>
</div>
<div class="paragraph">
<p>Using a dedicated Puppet content view can be useful for your organization if you are doing intensive development on your Puppet code base. This usually applies to organizations that are just getting started implementing Puppet: you are making many changes to the Puppet code base all the time, and if you stick those modules in a CV with 35,000 RPMs in there as well, publishing a new version will take more time than  you probably want to spend waiting. (Apologies for the long sentence there.)</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/wzzrd/hubpress.io/gh-pages/images/pupcvs.png" alt="a Puppet CV created" width="480" height="270">
</div>
</div>
<div class="paragraph">
<p>If you split out your Puppet modules into a dedicated content view, you get quick publishing and promotion of that content view, speeding up the pace of making changes to your Puppet code base.</p>
</div>
<div class="paragraph">
<p>The downside is, that you are breaking the bond between RPMs and Puppet content views. This means that you can no longer be sure that a specific version of a content view with RPMs is tested with a certain set of Puppet modules. How important that is for your infrastructure, I cannot assess, but I have learned it varies from customer to customer.</p>
</div>
<div class="paragraph">
<p>Anyway, I created another screencast to explain the concept of a dedicated Puppet content view, uploaded it to Youtube and I hope you enjoy.</p>
</div>
<div class="paragraph">
<p>Please make sure you subscribe to the channel and leave comments and / or like the video. Your feedback is important to me and makes it clear whether or not I&#8217;m helping people by making these videos.</p>
</div>
<div class="paragraph">
<p>Next time around, I&#8217;ll start introducing other Red Hat management products, starting with Ansible Tower.</p>
</div>
<div class="paragraph">
<p>Until then! Cheers!</p>
</div>
<div class="videoblock">
<div class="content">
<iframe src="https://www.youtube.com/embed/Y6xDU-WMFFY?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>]]></description><link>http://100things.wzzrd.com/2017/03/08/How-to-use-a-dedicated-Puppet-content-view-in-Satellite-6.html</link><guid isPermaLink="true">http://100things.wzzrd.com/2017/03/08/How-to-use-a-dedicated-Puppet-content-view-in-Satellite-6.html</guid><category><![CDATA[youtube]]></category><category><![CDATA[ satellite6]]></category><category><![CDATA[ content views]]></category><category><![CDATA[ puppet]]></category><dc:creator><![CDATA[Maxim Burgerhout]]></dc:creator><pubDate>Wed, 08 Mar 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Content views and composite content views]]></title><description><![CDATA[<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/wzzrd/hubpress.io/gh-pages/images/boxes.png" alt="Whiteboarding" width="480" height="270">
</div>
</div>
<div class="paragraph">
<p>We have been talking about content views in the previous posts, but to be sure we are all on the same page: a content view is a versioned, filtered set of repositories that you can promote between lifecycle environments. We have been talking about 'normal' content views, or CV, up until now, but Satellite 6 also knows the concept of a <em>composite content view</em>, or CCV.</p>
</div>
<div class="paragraph">
<p>A composite content view allows you to bundle other content views, rather than individual repositories. The best approach to this is to start creating re-usable building blocks (component content views) to bundle in CCVs. You could, for example, create a building block for the base operating system, and combine that with different application content views into composite content views.</p>
</div>
<div class="paragraph">
<p>You might want to do this if your application content views follow different lifecycle paths, or move slower (or faster) than your base operating system content view through the same lifecycle path.</p>
</div>
<div class="paragraph">
<p>Another use case would be if the application content view is maintained by a different department. By using composite content views in that case, the team of application administrators or developers can manage the application content view, and the Linux administrator team can manage the base operating system content view. Every once in a while - depending on requirements - the two component CVs are bundled together into a CCV, and then published and promoted.</p>
</div>
<div class="paragraph">
<p>You then use activation keys to register new systems to the CCV and use the provisions in that activation key to grant access to specific repositories in the CCV. (This will be the topic of a later video.)</p>
</div>
<div class="paragraph">
<p>I created this episode because people often ask what the difference is between CVs and CCVs, and if they should always use CCVs. I want to be clear about that last question. The answer to it is a distinct <em>no</em>. Do <em>not</em> use CCVs just because you can. <em>Do</em> use CCVs because you are trying to solve one of the use cases mentioned above, or one of the use cases mentioned in the <a href="https://access.redhat.com/articles/1585273">10 Steps to Build an SOE with Satellite 6</a> document. For those cases, CCVs are perfect :)</p>
</div>
<div class="paragraph">
<p>Hope you enjoy the video! Please subscribe and leave any comments here, or on YouTube, whichever you prefer!</p>
</div>
<div class="paragraph">
<p>Until next time!</p>
</div>
<div class="videoblock">
<div class="content">
<iframe src="https://www.youtube.com/embed/BJjAWME1TlQ?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>]]></description><link>http://100things.wzzrd.com/2017/02/15/Content-views-and-composite-content-views.html</link><guid isPermaLink="true">http://100things.wzzrd.com/2017/02/15/Content-views-and-composite-content-views.html</guid><category><![CDATA[satellite6]]></category><category><![CDATA[ content views]]></category><category><![CDATA[ youtube]]></category><dc:creator><![CDATA[Maxim Burgerhout]]></dc:creator><pubDate>Wed, 15 Feb 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[New video: Updating your Satellite 6 system]]></title><description><![CDATA[<div class="paragraph">
<p>The other day, I was talking to a customer about Satellite updates regarding the recently released <a href="https://access.redhat.com/blogs/1169563/posts/2890071">Satellite 6.2.7 update</a>. He and his co-workers were a little anxious about updating their Satellite server, as it is a quite vital piece of their infrastructure.</p>
</div>
<div class="paragraph">
<p>I explained the simple upgrade procedure and as they ran through it, they quickly saw that everything went smoothly. Within a couple of minutes they were running on a new versin of Satellite! :)</p>
</div>
<div class="paragraph">
<p>It then occured to me though, that it would make sense to pause the video series about content views for a bit. Instead of a content view video, I&#8217;m doing an extra video on the simple steps of safely and correctly updating a Satellite server.</p>
</div>
<div class="paragraph">
<p>This is a really short one - as I hope to have more - that walks you quickly through the steps of updating a Satellite 6 system:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>identifying that there is an update outstanding (always read the documentation about released updates!)</p>
</li>
<li>
<p>installing the updated packages</p>
</li>
<li>
<p>making sure any database migrations and mandatory configuration file changes are applied</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>The video below will take you through these steps and make sure you are prepared for your next Satellite 6 update! :) Please subscribe to the Youtube channel to be informed of future videos!</p>
</div>]]></description><link>http://100things.wzzrd.com/2017/01/31/New-video-Updating-your-Satellite-6-system.html</link><guid isPermaLink="true">http://100things.wzzrd.com/2017/01/31/New-video-Updating-your-Satellite-6-system.html</guid><category><![CDATA[youtube]]></category><category><![CDATA[ satellite6]]></category><category><![CDATA[ updates]]></category><dc:creator><![CDATA[Maxim Burgerhout]]></dc:creator><pubDate>Tue, 31 Jan 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introducing a new blog!]]></title><description><![CDATA[<div class="paragraph">
<p>With my recently launched Youtube channel - 100 things to do with Red Hat Management products - I felt that it would be useful to have a blog. A place where I could announce new videos, add some additional explanation to those videos, link to extra content, etc.</p>
</div>
<div class="paragraph">
<p>To be honest, I&#8217;m not completely sure that I&#8217;ve found what I&#8217;m looking for with this Hubpress.io thingy, but it looks good enough for now.</p>
</div>]]></description><link>http://100things.wzzrd.com/2017/01/30/Introducing-a-new-blog.html</link><guid isPermaLink="true">http://100things.wzzrd.com/2017/01/30/Introducing-a-new-blog.html</guid><category><![CDATA[Intro]]></category><dc:creator><![CDATA[Maxim Burgerhout]]></dc:creator><pubDate>Mon, 30 Jan 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Advanced content filtering with Satellite 6]]></title><description><![CDATA[<div class="paragraph">
<p>Today&#8217;s video is about advanced content filtering in Satellite 6. As you probably know, Satellite 6 allows you to filter any repositories it serves out to your clients. These filtered repositories we call 'content views'. If you are unfamiliar with that, I suggest you go take a look at <a href="https://www.youtube.com/watch?v=pQp4LqBpaKg">last week&#8217;s video</a>, that introduces content views and some related concepts.</p>
</div>
<div class="paragraph">
<p>If you are ready for a deeper dive into content filtering, then this week&#8217;s video is exactly right for you! As a short preview, this week, I&#8217;m talking about:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>the difference between include and exclude filters,</p>
</li>
<li>
<p>in what cases it makes sense to combine include and exclude filters,</p>
</li>
<li>
<p>in what cases it does not,</p>
</li>
<li>
<p>filtering errata vs. filtering packages</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Ready? Jump in (and subscribe!) by <a href="https://www.youtube.com/watch?v=p-t4WNctFyI">clicking right here</a>:, or watch inline below:</p>
</div>
<div class="videoblock">
<div class="content">
<iframe src="https://www.youtube.com/embed/p-t4WNctFyI?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>]]></description><link>http://100things.wzzrd.com/2017/01/30/Advanced-content-filtering-with-Satellite-6.html</link><guid isPermaLink="true">http://100things.wzzrd.com/2017/01/30/Advanced-content-filtering-with-Satellite-6.html</guid><category><![CDATA[youtube]]></category><category><![CDATA[ satellite6]]></category><category><![CDATA[ content-views]]></category><dc:creator><![CDATA[Maxim Burgerhout]]></dc:creator><pubDate>Mon, 30 Jan 2017 00:00:00 GMT</pubDate></item></channel></rss>